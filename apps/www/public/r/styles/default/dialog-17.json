{
  "name": "dialog-17",
  "type": "registry:example",
  "files": [
    {
      "path": "example/components/dialogs/dialog-17.tsx",
      "content": "\"use client\";\n\nimport type { CardImages } from \"react-payment-inputs/images\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { CreditCard, Store } from \"lucide-react\";\nimport { usePaymentInputs } from \"react-payment-inputs\";\nimport images from \"react-payment-inputs/images\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n\nexport default function DialogDemo() {\n  const {\n    meta,\n    getCardNumberProps,\n    getExpiryDateProps,\n    getCVCProps,\n    getCardImageProps,\n  } = usePaymentInputs();\n  const couponInputRef = useRef<HTMLInputElement>(null);\n  const [showCouponInput, setShowCouponInput] = useState(false);\n  const [couponCode, setCouponCode] = useState(\"\");\n\n  // Auto-focus the coupon input when it's shown\n  useEffect(() => {\n    if (showCouponInput && couponInputRef.current) {\n      couponInputRef.current.focus();\n    }\n  }, [showCouponInput]);\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Checkout</Button>\n      </DialogTrigger>\n      <DialogContent>\n        <div className=\"mb-2 flex flex-col gap-2\">\n          <div\n            className=\"flex size-11 shrink-0 items-center justify-center rounded-full border border-border\"\n            aria-hidden=\"true\"\n          >\n            <Store className=\"opacity-80\" size={16} strokeWidth={2} />\n          </div>\n          <DialogHeader>\n            <DialogTitle className=\"text-left\">Confirm and pay</DialogTitle>\n            <DialogDescription className=\"text-left\">\n              Pay securely and cancel any time.\n            </DialogDescription>\n          </DialogHeader>\n        </div>\n\n        <form className=\"space-y-5\">\n          <div className=\"space-y-4\">\n            <RadioGroup className=\"grid-cols-2\" defaultValue=\"yearly\">\n              {/* Monthly */}\n              <label className=\"relative flex cursor-pointer flex-col gap-1 rounded-lg border border-input px-4 py-3 shadow-sm shadow-black/5 outline-offset-2 transition-colors has-[[data-state=checked]]:border-ring has-[[data-state=checked]]:bg-accent has-[:focus-visible]:outline has-[:focus-visible]:outline-2 has-[:focus-visible]:outline-ring/70\">\n                <RadioGroupItem\n                  id=\"radio-monthly\"\n                  value=\"monthly\"\n                  className=\"sr-only after:absolute after:inset-0\"\n                />\n                <p className=\"text-sm font-medium text-foreground\">Monthly</p>\n                <p className=\"text-sm text-muted-foreground\">$32/month</p>\n              </label>\n              {/* Yearly */}\n              <label className=\"relative flex cursor-pointer flex-col gap-1 rounded-lg border border-input px-4 py-3 shadow-sm shadow-black/5 outline-offset-2 transition-colors has-[[data-state=checked]]:border-ring has-[[data-state=checked]]:bg-accent has-[:focus-visible]:outline has-[:focus-visible]:outline-2 has-[:focus-visible]:outline-ring/70\">\n                <RadioGroupItem\n                  id=\"radio-yearly\"\n                  value=\"yearly\"\n                  className=\"sr-only after:absolute after:inset-0\"\n                />\n                <div className=\"inline-flex items-start justify-between gap-2\">\n                  <p className=\"text-sm font-medium text-foreground\">Yearly</p>\n                  <Badge>Popular</Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">$320/month</p>\n              </label>\n            </RadioGroup>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"nameOnCard\">Name on card</Label>\n              <Input id=\"nameOnCard\" type=\"text\" required />\n            </div>\n            <div className=\"space-y-2\">\n              <legend className=\"text-sm font-medium text-foreground\">\n                Card Details\n              </legend>\n              <div className=\"rounded-lg shadow-sm shadow-black/5\">\n                <div className=\"relative focus-within:z-10\">\n                  <Input\n                    className=\"peer rounded-b-none pe-9 shadow-none [direction:inherit]\"\n                    {...getCardNumberProps()}\n                  />\n                  <div className=\"pointer-events-none absolute inset-y-0 end-0 flex items-center justify-center pe-3 text-muted-foreground/80 peer-disabled:opacity-50\">\n                    {meta.cardType ? (\n                      <svg\n                        className=\"overflow-hidden rounded-sm\"\n                        {...getCardImageProps({\n                          images: images as unknown as CardImages,\n                        })}\n                        width={20}\n                      />\n                    ) : (\n                      <CreditCard\n                        size={16}\n                        strokeWidth={2}\n                        aria-hidden=\"true\"\n                      />\n                    )}\n                  </div>\n                </div>\n                <div className=\"-mt-px flex\">\n                  <div className=\"min-w-0 flex-1 focus-within:z-10\">\n                    <Input\n                      className=\"rounded-e-none rounded-t-none shadow-none [direction:inherit]\"\n                      {...getExpiryDateProps()}\n                    />\n                  </div>\n                  <div className=\"-ms-px min-w-0 flex-1 focus-within:z-10\">\n                    <Input\n                      className=\"rounded-s-none rounded-t-none shadow-none [direction:inherit]\"\n                      {...getCVCProps()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            {!showCouponInput ? (\n              <button\n                type=\"button\"\n                onClick={() => setShowCouponInput(true)}\n                className=\"text-sm underline hover:no-underline\"\n              >\n                + Add coupon\n              </button>\n            ) : (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"coupon\">Coupon code</Label>\n                <Input\n                  id=\"coupon\"\n                  ref={couponInputRef}\n                  placeholder=\"Enter your code\"\n                  value={couponCode}\n                  onChange={(e) => setCouponCode(e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n          <Button type=\"button\" className=\"w-full\">\n            Subscribe\n          </Button>\n        </form>\n\n        <p className=\"text-center text-xs text-muted-foreground\">\n          Payments are non-refundable. Cancel anytime.\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}