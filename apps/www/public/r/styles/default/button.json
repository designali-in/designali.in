{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { DIcons } from \"dicons\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-accent bg-popover hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        success: \"bg-green-500 text-white hover:bg-green-500/80\",\n        blue: \"bg-blue-500 text-white hover:bg-blue-500/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:text-blue-500 hover:underline\",\n      },\n      animation: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        md: \"h-10 rounded-md px-3 text-xs\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  icon?: keyof typeof DIcons; // Icon name as a string\n  styleicon?: \"left\" | \"right\";\n  loading?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      styleicon = \"right\",\n      asChild = false,\n      loading = false,\n      icon,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const IconComponent = icon ? DIcons[icon] : null; // Dynamically access the icon component\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      >\n        {styleicon === \"left\" && IconComponent && (\n          <IconComponent strokeWidth={1} className=\"h-5 w-5\" />\n        )}\n        {loading ? (\n          <>\n            <DIcons.Loader className=\"mr-2 h-4 w-4 animate-spin\" />\n            Loading...\n          </>\n        ) : null}\n\n        {props.children}\n\n        {styleicon === \"right\" && IconComponent && (\n          <IconComponent strokeWidth={1} className=\"h-5 w-5\" />\n        )}\n      </Comp>\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}