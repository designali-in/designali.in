{
  "name": "slider-25",
  "type": "registry:example",
  "files": [
    {
      "path": "example/components/sliders/slider-25.tsx",
      "content": "\"use client\";\n\nimport React, { useRef } from \"react\";\nimport { useSliderWithInput } from \"@/registry/default/hooks/use-slider-with-input\";\nimport { RotateCcw } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\nexport default function SliderDemo() {\n  // Create refs to store reset functions\n  const resetFunctionsRef = useRef<(() => void)[]>([]);\n\n  // Function to reset all sliders to default\n  const resetAll = () => {\n    resetFunctionsRef.current.forEach((resetFn) => resetFn());\n  };\n\n  // Function to register reset functions\n  const registerResetFunction = (resetFn: () => void, index: number) => {\n    resetFunctionsRef.current[index] = resetFn;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <legend className=\"text-sm font-medium text-foreground\">\n        Object position\n      </legend>\n      <div className=\"space-y-2\">\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[-2]}\n          defaultValue={[0]}\n          label=\"X\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 0)}\n        />\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[4]}\n          defaultValue={[0]}\n          label=\"Y\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 1)}\n        />\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[2]}\n          defaultValue={[0]}\n          label=\"Z\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 2)}\n        />\n      </div>\n      <Button className=\"w-full\" variant=\"outline\" onClick={resetAll}>\n        <RotateCcw\n          className=\"-ms-1 me-2 opacity-60\"\n          size={16}\n          strokeWidth={2}\n          aria-hidden=\"true\"\n        />\n        Reset\n      </Button>\n    </div>\n  );\n}\n\nfunction SliderWithInput({\n  minValue,\n  maxValue,\n  initialValue,\n  defaultValue,\n  label,\n  onRegisterReset,\n}: {\n  minValue: number;\n  maxValue: number;\n  initialValue: number[];\n  defaultValue: number[];\n  label: string;\n  onRegisterReset: (resetFn: () => void) => void;\n}) {\n  const {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  } = useSliderWithInput({ minValue, maxValue, initialValue, defaultValue });\n\n  // Register the reset function when the component mounts\n  React.useEffect(() => {\n    onRegisterReset(resetToDefault);\n  }, [onRegisterReset, resetToDefault]);\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Label className=\"text-xs text-muted-foreground\">{label}</Label>\n      <Slider\n        className=\"grow [&>:last-child>span]:rounded\"\n        value={sliderValue}\n        onValueChange={handleSliderChange}\n        min={minValue}\n        max={maxValue}\n        aria-label={label}\n      />\n      <Input\n        className=\"h-8 w-12 px-2 py-1\"\n        type=\"text\"\n        inputMode=\"decimal\"\n        value={inputValues[0]}\n        onChange={(e) => handleInputChange(e, 0)}\n        onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            validateAndUpdateValue(inputValues[0], 0);\n          }\n        }}\n        aria-label=\"Enter value\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}