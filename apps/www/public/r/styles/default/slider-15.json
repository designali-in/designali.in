{
  "name": "slider-15",
  "type": "registry:example",
  "files": [
    {
      "path": "example/components/sliders/slider-15.tsx",
      "content": "\"use client\";\n\nimport { useSliderWithInput } from \"@/registry/default/hooks/use-slider-with-input\";\nimport { RotateCcw } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport default function SliderDemo() {\n  const minValue = 0.0;\n  const maxValue = 2;\n  const initialValue = [1.25];\n  const defaultValue = [1];\n\n  const {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  } = useSliderWithInput({ minValue, maxValue, initialValue, defaultValue });\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between gap-2\">\n        <Label>Temperature</Label>\n        <div className=\"flex items-center gap-1\">\n          <TooltipProvider delayDuration={0}>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"size-7\"\n                  aria-label=\"Reset\"\n                  onClick={resetToDefault}\n                >\n                  <RotateCcw size={16} strokeWidth={2} aria-hidden=\"true\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent className=\"px-2 py-1 text-xs\">\n                Reset to default\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          <Input\n            className=\"h-7 w-12 px-2 py-0\"\n            type=\"text\"\n            inputMode=\"decimal\"\n            value={inputValues[0]}\n            onChange={(e) => handleInputChange(e, 0)}\n            onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                validateAndUpdateValue(inputValues[0], 0);\n              }\n            }}\n            aria-label=\"Enter value\"\n          />\n        </div>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <Slider\n          className=\"grow\"\n          value={sliderValue}\n          onValueChange={handleSliderChange}\n          min={minValue}\n          max={maxValue}\n          step={0.01}\n          aria-label=\"Temperature\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}