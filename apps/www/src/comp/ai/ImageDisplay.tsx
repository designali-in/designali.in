import { useEffect, useState } from "react";
import { AlertCircle, Download, ImageIcon, Share } from "lucide-react";
import { createPortal } from "react-dom";

import { imageHelpers } from "@/lib/ai/image-helpers";
import { ProviderTiming } from "@/lib/ai/image-types";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface ImageDisplayProps {
  provider: string;
  image: string | null | undefined;
  timing?: ProviderTiming;
  failed?: boolean;
  fallbackIcon?: React.ReactNode;
  enabled?: boolean;
  modelId: string;
}

export function ImageDisplay({
  provider,
  image,
  timing,
  failed,
  fallbackIcon,
  modelId,
}: ImageDisplayProps) {
  const [isZoomed, setIsZoomed] = useState(false);

  useEffect(() => {
    if (isZoomed) {
      window.history.pushState({ zoomed: true }, "");
    }

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape" && isZoomed) {
        setIsZoomed(false);
      }
    };

    const handlePopState = () => {
      if (isZoomed) {
        setIsZoomed(false);
      }
    };

    if (isZoomed) {
      document.addEventListener("keydown", handleEscape);
      window.addEventListener("popstate", handlePopState);
    }

    return () => {
      document.removeEventListener("keydown", handleEscape);
      window.removeEventListener("popstate", handlePopState);
    };
  }, [isZoomed]);

  const handleImageClick = (e: React.MouseEvent) => {
    if (image) {
      e.stopPropagation();
      setIsZoomed(true);
    }
  };

  const handleActionClick = (
    e: React.MouseEvent,
    imageData: string,
    provider: string,
  ) => {
    e.stopPropagation();
    imageHelpers.shareOrDownload(imageData, provider).catch((error) => {
      console.error("Failed to share/download image:", error);
    });
  };

  return (
    <>
      <div
        className={cn(
          "group relative  w-full rounded-md ",
          image && !failed && "cursor-pointer",
          (!image || failed) && "border-1 ",
        )}
        onClick={handleImageClick}
      >
        {image && !failed ? (
          <>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={`data:image/png;base64,${image}`}
              alt={`Generated by ${provider}`}
              className="h-full w-full rounded-lg object-cover"
            />
            <Button
              size="icon"
              variant="secondary"
              className="absolute bottom-2 left-2 transition-opacity sm:opacity-0 sm:group-hover:opacity-100"
              onClick={(e) => handleActionClick(e, image, provider)}
            >
              <span className="sm:hidden">
                <Share className="h-4 w-4" />
              </span>
              <span className="hidden sm:block">
                <Download className="h-4 w-4" />
              </span>
            </Button>
            {timing?.elapsed && (
              <div className="absolute bottom-2 right-2 rounded-md bg-black/70 px-2 py-1 shadow backdrop-blur-sm">
                <span className="text-xs font-medium text-white/90">
                  {(timing.elapsed / 1000).toFixed(1)}s
                </span>
              </div>
            )}
          </>
        ) : (
          <div className="absolute inset-0 flex flex-col items-center justify-center">
            {failed ? (
              fallbackIcon || <AlertCircle className="h-8 w-8 text-red-500" />
            ) : image ? (
              <>
                {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                  src={`data:image/png;base64,${image}`}
                  alt={`Generated by ${provider}`}
                  className="h-full w-full rounded-lg object-cover"
                />
                <Button
                  size="icon"
                  variant="secondary"
                  className="absolute bottom-2 left-2 transition-opacity sm:opacity-0 sm:group-hover:opacity-100"
                  onClick={(e) => handleActionClick(e, image, provider)}
                >
                  <span className="sm:hidden">
                    <Share className="h-4 w-4" />
                  </span>
                  <span className="hidden sm:block">
                    <Download className="h-4 w-4" />
                  </span>
                </Button>
              </>
            ) : timing?.startTime ? (
              <>{/* <div className="text-zinc-400 mb-2">{provider}</div> */}</>
            ) : (
              <ImageIcon className="h-12 w-12 text-zinc-300" />
            )}
          </div>
        )}
      </div>

      {isZoomed &&
        image &&
        createPortal(
          <div
            className="fixed inset-0 z-50 flex min-h-[100dvh] w-screen cursor-pointer items-center justify-center bg-black/90"
            onClick={() => setIsZoomed(false)}
          >
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={`data:image/png;base64,${image}`}
              alt={`Generated by ${provider}`}
              className="max-h-[90dvh] max-w-[90vw] object-contain"
              onClick={(e) => e.stopPropagation()}
            />
          </div>,
          document.body,
        )}
    </>
  );
}
