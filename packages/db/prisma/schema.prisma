generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  likes        Int      @default(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  bio           String?
  image         String?
  coverImage    String?
  website       String?
  twitter       String?
  instagram     String?
  linkedin      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  role          UserRole  @default(USER)

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  projects           Project[] // A user can have multiple projects
  comment            Comment[]
  community          Community[]
  currentlyWatching  CurrentlyDesign[]
  designPost         DesignPost[]
  finishedWatching   FinishedDesign[]
  graphic            Graphic[]
  like               Like[]
  notStartedWatching NotStartedDesign[]
  poll               Poll[]
  pollVote           PollVote[]
  rating             Rating[]
  reviewLikes        ReviewLike[]
  reviews            Reviews[]
  teamActivities     TeamActivity[]
  teams              TeamMember[]
  accounts           Account[]
  sessions           Session[]
  urls               Url[]
  Asset              Asset[]
  likes              AssetLike[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Url {
  id          String   @id @default(cuid())
  originalUrl String
  shortUrl    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())

  @@unique([userId, originalUrl])
  @@map("urls")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  slug      String   @unique
  likes     Int      @default(0)
  views     Int      @default(0)
}

model Team {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  invitations Invitation[]
  activities  TeamActivity[]
  members     TeamMember[]
}

model TeamMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
}

model TeamActivity {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  event     String
  metadata  Json
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([userId])
}

model Graphic {
  id   String @id @default(cuid())
  name String @unique

  genre       String
  releaseYear String

  director     String
  freepro      String
  dimention    String
  features     String @db.VarChar(500)
  description  String @db.VarChar(1500)
  trailerLink  String
  downloadLink String

  coverImage   String
  galleryImage String[]

  totalRatings Int @default(0)

  creatorId String
  createdAt DateTime @default(now())

  currentlyDesign CurrentlyDesign[]
  finishedDesign  FinishedDesign[]

  creator          User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  notStartedDesign NotStartedDesign[]
  rating           Rating[]
  reviews          Reviews[]

  @@index([name])
  @@index([creatorId])
}

model Reviews {
  id          String       @id @default(cuid())
  userId      String
  graphicId   String
  title       String       @db.VarChar(50)
  text        String       @db.VarChar(1500)
  createdAt   DateTime     @default(now())
  reviewLikes ReviewLike[]
  graphic     Graphic      @relation(fields: [graphicId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([graphicId])
}

model ReviewLike {
  userId   String
  reviewId String
  review   Reviews @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, reviewId])
}

model Rating {
  id        String  @id @default(cuid())
  userId    String
  graphicId String
  rating    Int
  graphic   Graphic @relation(fields: [graphicId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([graphicId])
}

model FinishedDesign {
  id        String   @id @default(cuid())
  userId    String
  graphicId String
  createdAt DateTime @default(now())
  graphic   Graphic  @relation(fields: [graphicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([graphicId])
}

model CurrentlyDesign {
  id        String   @id @default(cuid())
  userId    String
  graphicId String
  createdAt DateTime @default(now())
  graphic   Graphic  @relation(fields: [graphicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([graphicId])
}

model NotStartedDesign {
  id        String   @id @default(cuid())
  userId    String
  graphicId String
  createdAt DateTime @default(now())
  graphic   Graphic  @relation(fields: [graphicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([graphicId])
}

model Community {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @db.VarChar(300)
  category    String
  creatorId   String
  createdAt   DateTime     @default(now())
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  post        DesignPost[]

  @@index([creatorId])
}

model DesignPost {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(80)
  message     String    @db.VarChar(600)
  creatorId   String
  communityId String
  createdAt   DateTime  @default(now())
  comment     Comment[]
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  like        Like[]

  @@index([communityId])
}

model Comment {
  id        String     @id @default(cuid())
  text      String     @db.VarChar(300)
  createdAt DateTime   @default(now())
  authorId  String
  postId    String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      DesignPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  userId String
  postId String
  post   DesignPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Poll {
  id        String       @id @default(cuid())
  question  String       @db.VarChar(150)
  creatorId String
  expiresAt DateTime
  createdAt DateTime     @default(now())
  creator   User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  option    PollOption[]
}

model PollOption {
  id        String     @id @default(cuid())
  option    String     @db.VarChar(80)
  pollId    String
  createdAt DateTime   @default(now())
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  vote      PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  userId       String
  pollOptionId String
  createdAt    DateTime   @default(now())
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Project {
  id               String   @id @default(cuid())
  projectName      String
  projectInfo      String? // Optional project information
  techStack        String[]
  projectUrl       String? // Optional project URL
  githubUrl        String? // Optional GitHub URL
  completedTickets Int? // Number of completed tickets (optional)
  tickets          Ticket[] // A project can have multiple tickets
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User?    @relation(fields: [userId], references: [id])
  userId           String?
}

model Ticket {
  id                  String    @id @default(cuid())
  title               String? // Optional title for the ticket
  messages            Message[] // Messages associated with the ticket
  status              String?   @default("active") // active, inprogress, completed
  category            String[]
  priority            String? // low, medium, high
  estimatedFinishTime String? // Estimated time to complete the ticket
  project             Project   @relation(fields: [projectId], references: [id])
  projectId           String // ID of the project this ticket belongs to
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  sender    String // user, admin
  content   String // Content of the message
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String // ID of the ticket this message belongs to
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("newsletter_subscribers")
}

model Asset {
  id           String      @id @default(cuid())
  title        String
  description  String?
  url          String
  downloadlink String
  downloads    Int         @default(0)
  views        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  likes        AssetLike[]
  tags         Tag[]
  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   String?
}

model AssetLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  assetId   String
  user      User     @relation(fields: [userId], references: [id])
  asset     Asset    @relation(fields: [assetId], references: [id])

  @@unique([userId, assetId])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  assets Asset[]
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @unique
  assets Asset[]
}
